name: Run build on push
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
  schedule:
    - cron: "0 7 * * 1,3,5"
env:
  VBUILD_UNIT_TESTS: false
  CONAN_VER: 1.59.0
jobs:

  test-it:
    runs-on: ubuntu-latest
    steps:
    - name: running
      env:
        EX: ${{ github.event_name == 'pull_request' && 3 || 90 }}
      run: |
        printenv EX

  # run-build-ubuntu:
  #   runs-on: ubuntu-20.04
  #   timeout-minutes: 75
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.CONAN_VER }} --force

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         ./build-all.sh

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-ubuntu
  #         retention-days: ${{ fromJSON('{"false":90,"true":3}')[github.event_name == 'pull_request'] }}
  #         path: |
  #           *.gz

  #     - run: echo "🍏 This job's status is ${{ job.status }}."

  # run-build-windows:
  #   runs-on: windows-2019
  #   needs: run-build-ubuntu
  #   env:
  #     VBUILDRELEASE: Release
  #     VBUILDDEBUG: Debug
  #     VBUILDMODE: Release
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a %github.event_name% event."
  #     - run: echo "🐧 This job is now running on a %runner.os% server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is %github.ref% and your repository is %github.repository%."

  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The %github.repository% repository has been cloned to the runner."

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.CONAN_VER }} --force

  #     - name: Setup MSBuild
  #       uses: microsoft/setup-msbuild@v1

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         .\build-all.bat

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-windows
  #         retention-days: ${{ fromJSON('{"false":90,"true":3}')[github.event_name == 'pull_request'] }}
  #         path: |
  #           *.zip

  #     - run: echo "🍏 This job's status is %job.status%."

  # run-build-mac:
  #   runs-on: macos-11
  #   needs: run-build-ubuntu
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #           python-version: 3.11

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.CONAN_VER }} --force

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         ./build-all.sh

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-mac
  #         retention-days: ${{ fromJSON('{"false":90,"true":3}')[github.event_name == 'pull_request'] }}
  #         path: |
  #           *.gz

  #     - run: echo "🍏 This job's status is ${{ job.status }}."

  # test-with-quickstart:
  #   needs: run-build-ubuntu
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-java@v3
  #       with:
  #         # See https://github.com/actions/setup-java#supported-distributions for list
  #         distribution: 'temurin'
  #         java-version: '11'

  #     - name: Download artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-output-ubuntu

  #     - name: Untar artifact
  #       run: |
  #         tar -xzvf *.tar.gz

  #     - name: Git clone opentdf 
  #       run: |
  #         git clone --depth 1 https://github.com/opentdf/opentdf.git

  #     - uses: yokawasa/action-setup-kube-tools@v0.9.2
  #       with:
  #         setup-tools: |
  #           kubectl
  #           helm
  #           tilt
  #         # This should be in sync with the minikube-deployed kube version below
  #         kubectl: "1.24.1"
  #         helm: "3.9.1"
  #         tilt: "0.30.4"

  #     - run: |
  #         kubectl version --client
  #         kustomize version
  #         tilt version

  #     - name: start minikube
  #       id: minikube
  #       uses: medyagh/setup-minikube@master
  #       with:
  #         minikube-version: 1.26.0
  #         # This should be in sync with the setup-tools version above
  #         kubernetes-version: 1.24.1

  #     - name: Run tilt & run sanity test
  #       env:
  #         # This test script is passed to opentdf/quickstart tilt file
  #         TEST_SCRIPT: ../../wait-and-test.sh
  #       run: |-
  #         kubectl version
  #         pwd
  #         cd opentdf/quickstart
  #         pwd
  #         tilt ci

  # ci:
  #   needs:
  #     - run-build-mac
  #     - run-build-ubuntu
  #     - run-build-windows
  #     - test-with-quickstart
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: exit 1
  #       if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
