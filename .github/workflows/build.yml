name: Run build on push
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
  schedule:
    - cron: "0 7 * * 1,3,5"
env:
  VBUILD_UNIT_TESTS: false
  VCONAN_VER: 1.59.0
  # Would be nice if this value was set automagically when client-cpp is released and consumed everywhere
  VCLIENT_CPP_VER: 1.5.6
  VCONAN_BRANCH_VERSION: "True"
  # recipe should usually pull from 'main' but can be changed to a branch name if recipe changes are pending
  VCONAN_RECIPE_VER: main
jobs:

  # run-build-ubuntu:
  #   runs-on: ubuntu-20.04
  #   timeout-minutes: 75
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v3

  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.VCONAN_VER }} --force

  #     - name: Check out client-cpp code
  #       uses: actions/checkout@v3
  #       with:
  #         repository: opentdf/client-conan
  #         ref: ${{ env.VCONAN_RECIPE_VER }}
  #         path: client-conan

  #     - name: Get client-cpp into conan local cache, built from repo if necessary
  #       run: |
  #         cd ${{ github.workspace }}
  #         cd client-conan
  #         conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         ./build-all.sh

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-ubuntu
  #         retention-days: ${{ github.event_name == 'pull_request' && 3 || 90 }}
  #         path: |
  #           *.gz

  #     - run: echo "🐧 This job's status is ${{ job.status }}."

  # run-build-manylinux-aarch64:
  #   runs-on: ubuntu-latest
  #   needs: run-build-ubuntu

  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #       with:
  #         platforms: arm64
  
  #     - name: Build
  #       run: ./docker/linux-arm/deploy.sh
    
  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-ubuntu-arm64
  #         retention-days: ${{ github.event_name == 'pull_request' && 3 || 90 }}
  #         path: |
  #           *.gz
    
  #     - run: echo "🐧 This job's status is ${{ job.status }}."

  # run-build-windows:
  #   runs-on: windows-2019
  #   needs: run-build-ubuntu
  #   env:
  #     VBUILDRELEASE: Release
  #     VBUILDDEBUG: Debug
  #     VBUILDMODE: Release
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a %github.event_name% event."
  #     - run: echo "🪟 This job is now running on a %runner.os% server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is %github.ref% and your repository is %github.repository%."

  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The %github.repository% repository has been cloned to the runner."

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.VCONAN_VER }} --force

  #     - name: Check out client-cpp code
  #       uses: actions/checkout@v3
  #       with:
  #         repository: opentdf/client-conan
  #         ref: ${{ env.VCONAN_RECIPE_VER }}
  #         path: client-conan

  #     - name: Get client-cpp into conan local cache, built from repo if necessary
  #       run: |
  #         cd ${{ github.workspace }}
  #         cd client-conan
  #         conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}

  #     - name: Setup MSBuild
  #       uses: microsoft/setup-msbuild@v1

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         .\build-all.bat

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-windows
  #         retention-days: ${{ github.event_name == 'pull_request' && 3 || 90 }}
  #         path: |
  #           *.zip

  #     - run: echo "🪟 This job's status is %job.status%."

  # run-build-mac:
  #   runs-on: macos-11
  #   needs: run-build-ubuntu
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🍏 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #           python-version: 3.11

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.VCONAN_VER }} --force

  #     - name: Check out client-cpp code
  #       uses: actions/checkout@v3
  #       with:
  #         repository: opentdf/client-conan
  #         ref: ${{ env.VCONAN_RECIPE_VER }}
  #         path: client-conan

  #     - name: Get client-cpp into conan local cache, built from repo if necessary
  #       run: |
  #         cd ${{ github.workspace }}
  #         cd client-conan
  #         conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         ./build-all.sh

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-mac
  #         retention-days: ${{ github.event_name == 'pull_request' && 3 || 90 }}
  #         path: |
  #           *.gz

  #     - run: echo "🍏 This job's status is ${{ job.status }}."

  # run-build-m1:
  #   runs-on: macos-13-xlarge
  #   needs: run-build-mac
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🍏 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  #     - name: Check out repository code
  #       uses: actions/checkout@v3

  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

  #     - name: Install Conan
  #       run: pip3 install conan==${{ env.VCONAN_VER }} --force

  #     - name: Install swig
  #       run: brew install swig

  #     - name: Check out client-cpp code
  #       uses: actions/checkout@v3
  #       with:
  #         repository: opentdf/client-conan
  #         ref: ${{ env.VCONAN_RECIPE_VER }}
  #         path: client-conan

  #     - name: Get client-cpp into conan local cache, built from repo if necessary
  #       run: |
  #         cd ${{ github.workspace }}
  #         cd client-conan
  #         conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}

  #     - name: Run build
  #       run: |
  #         cd ${{ github.workspace }}
  #         ./build-all.sh

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build-output-mac-m1
  #         retention-days: ${{ github.event_name == 'pull_request' && 3 || 90 }}
  #         path: |
  #           *.gz

  #     - run: echo "🍏 This job's status is ${{ job.status }}."

  run-build-multi:
    # needs: [run-build-ubuntu,run-build-manylinux-aarch64,run-build-mac,run-build-m1]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          # See https://github.com/actions/setup-java#supported-distributions for list
          distribution: 'temurin'
          java-version: '11.0.22+7'

      - name: Check out repository code
        uses: actions/checkout@v3 

      - name: Set env
        run: echo "VERSION=$(cat TDF-SDK-VERSION)" >> $GITHUB_ENV

      - name: Download linux amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output-ubuntu

      - name: Untar linux amd64 artifact, copy jar, and rename
        run: |
          tar -xzvf tdf-lib-java.tar.gz
          cp tdf-lib-java/tdf-sdk-linux_64-$VERSION.jar multi/tdf-sdk-linux_amd64-$VERSION.jar && rm -rf tdf-lib-java tdf-lib-java.tar.gz

      - name: Download linux arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output-ubuntu-arm64

      - name: Untar linux arm64 artifact, copy jar, and rename
        run: |
          tar -xzvf tdf-lib-java.tar.gz
          cp tdf-lib-java/tdf-sdk-linux_64-$VERSION.jar multi/tdf-sdk-linux_arm64-$VERSION.jar && rm -rf tdf-lib-java tdf-lib-java.tar.gz

      - name: Download mac amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output-mac

      - name: Untar mac amd64 artifact, copy jar, and rename
        run: |
          tar -xzvf tdf-lib-java.tar.gz
          cp tdf-lib-java/tdf-sdk-osx_64-$VERSION.jar multi/tdf-sdk-osx_amd64-$VERSION.jar && rm -rf tdf-lib-java tdf-lib-java.tar.gz

      - name: Download mac arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output-mac-m1

      - name: Untar mac arm64 artifact, copy jar, and rename
        run: |
          tar -xzvf tdf-lib-java.tar.gz
          cp tdf-lib-java/tdf-sdk-osx_64-$VERSION.jar multi/tdf-sdk-osx_arm64-$VERSION.jar && rm -rf tdf-lib-java tdf-lib-java.tar.gz

      - name: Build the multi jar
        run: |
          cd multi && ./build-multi-sdk.sh

      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output-multi
          retention-days: ${{ github.event_name == 'pull_request' && 1 || 90 }}
          path: |
            multi/tdf-sdk-all-*.jar

      - run: echo "This job's status is ${{ job.status }}."

      
  test-with-quickstart:
    needs: run-build-ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          # See https://github.com/actions/setup-java#supported-distributions for list
          distribution: 'temurin'
          java-version: '11'

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output-ubuntu

      - name: Untar artifact
        run: |
          tar -xzvf *.tar.gz

      - name: Git clone opentdf 
        run: |
          git clone --depth 1 https://github.com/opentdf/opentdf.git

      - uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: |
            kubectl
            helm
            tilt
          # This should be in sync with the minikube-deployed kube version below
          kubectl: "1.24.1"
          helm: "3.9.1"
          tilt: "0.30.4"

      - run: |
          kubectl version --client
          kustomize version
          tilt version

      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.26.0
          # This should be in sync with the setup-tools version above
          kubernetes-version: 1.24.1

      - name: Run tilt & run sanity test
        env:
          # This test script is passed to opentdf/quickstart tilt file
          TEST_SCRIPT: ../../wait-and-test.sh
        run: |-
          kubectl version
          pwd
          cd opentdf/quickstart
          pwd
          tilt ci

  # ci:
  #   needs:
  #     - run-build-mac
  #     - run-build-m1
  #     - run-build-ubuntu
  #     - run-build-manylinux-aarch64
  #     - run-build-windows
  #     - run-build-multi
  #     - test-with-quickstart
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: exit 1
  #       if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
